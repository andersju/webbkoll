<section class="result">
  <h3 id="headers">
    <%= gettext "HTTP headers" %>&#32;
    <%= anchor_link("headers") %>
  </h3>

  <div class="alpha">
    <table>
      <thead>
        <tr>
          <th><%= gettext("Pass") %></th>
          <th><%= gettext("Header") %></th>
          <th><%= gettext("Value") %></th>
          <th><%= gettext("Result") %></th>
        </tr>
      </thead>
      <tbody>
        <%= for header <- [@site.data.x_content_type_options, @site.data.x_frame_options, @site.data.x_xss_protection] do %>
          <tr>
            <td data-label="<%= gettext("Pass") %>"><%= if header.pass, do: icon(:pass), else: icon(:fail) %></td>
            <td data-label="<%= gettext("Header") %>"><%= header.name %></td>
            <td data-label="<%= gettext("Value") %>"><%= header.data %></td>
            <td data-label="<%= gettext("Result") %>"><%= result_text(header.result) %></td>
          </tr>
        <% end %>
      </tbody>
    </table>

    <aside class="howto">
      <span class="non-button-toggle" role="button" tabindex="0" data-a11y-toggle="howto-headers">
        <%= gettext("How to implement") %>
      </span>

      <div id="howto-headers">
        <p><%= gettext(~s|To enable these headers you'll need to add them to your web server configuration. This is a simple change. Exactly how you do it depends on what server you use. <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options">This page</a> [developer.mozilla.org] has configuration examples for Apache, Nginx and IIS.|) |> raw() %></p>

        <p><%= gettext(~s|<code>X-Content-Type-Options</code> should be set to <code>nosniff</code>, which is the only valid value.|) |> raw() %></p>

        <p><%= gettext(~s|<code>X-Frame-Options</code> can be set to <code>deny</code> (page can never be loaded in a frame), <code>sameorigin</code> (page can only be loaded in a frame only if the origin is the same), or <code>allow-from &lt;URI&gt;</code> (page can only be loaded in a frame on a page on the specified origin).|) |> raw() %></p>

        <p><%= gettext(~s|<code>X-XSS-Protection</code> should be set to <code>1</code> or <code>1; mode=block</code>.|) |> raw() %></p>

        <ul class="default">
          <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a> [developer.mozilla.org]</li>
          <li><a href="https://www.keycdn.com/support/x-content-type-options">X-Content-Type-Options HTTP Header</a> [keycdn.com]</li>
          <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options">X-Frame-Options</a> [developer.mozilla.org]</li>
          <li><a href="https://www.keycdn.com/blog/x-frame-options">X-Frame-Options – How to Combat Clickjacking</a> [keycdn.com]</li>
          <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> [developer.mozilla.org]</li>
          <li><a href="https://www.keycdn.com/blog/x-xss-protection">X-XSS-Protection – Preventing Cross-Site Scripting Attacks</a> [keycdn.com]</li>
        </ul>
      </div>
    </aside>

    <p><small><%= gettext(~s|The header tests are based on the ones from the <a href="https://github.com/mozilla/http-observatory">Mozilla HTTP Observatory</a> scanner/grader project (<a href="https://www.mozilla.org/en-US/MPL/2.0/">Mozilla Public License 2.0</a>) by April King, reimplemented by us for Webbkoll. The explanatory texts are from the <a href="https://observatory.mozilla.org/">Observatory by Mozilla</a> website, <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a>.|) |> raw() %></small></p>
  </div>

  <aside class="beta">
    <blockquote>
      <p><%= gettext(~s|The <strong><code>X-Content-Type-Options</code></strong> response HTTP header is a marker used by the server to indicate that the MIME types advertised in the Content-Type headers should not be changed and be followed. This allows to opt-out of MIME type sniffing, or, in other words, it is a way to say that the webmasters knew what they were doing.|) |> raw() %></p>

      <p><%= gettext(~s|The <strong><code>X-Frame-Options</code></strong> HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a <code>&lt;frame&gt;</code>, <code>&lt;iframe&gt;</code> or <code>&lt;object&gt;</code>. Sites can use this to avoid <a href="https://en.wikipedia.org/wiki/clickjacking">clickjacking</a> attacks, by ensuring that their content is not embedded into other sites.|) |> raw() %></p>

      <p><%= gettext(~s|The HTTP <strong><code>X-XSS-Protection</code></strong> response header is a feature of Internet Explorer, Chrome and Safari that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks. Although these protections are largely unnecessary in modern browsers when sites implement a strong <code>Content-Security-Policy</code> that disables the use of inline JavaScript (<code>'unsafe-inline'</code>), they can still provide protections for users of older web browsers that don't yet support CSP.|) |> raw() %></p>

      <footer>
        &mdash; <cite>MDN, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">Content Security Policy (CSP)</a>, Mozilla Contributors, <a href="http://creativecommons.org/licenses/by-sa/2.5/">CC BY-SA 2.5</a></cite>
      </footer>
    </blockquote>
    <p>
      <%= icon(:law) %>
      <%= gettext "GDPR: " %> <%= [~w|art 5 5.1.c|, ~w|art 5 5.1.f|, ~w|art 25|, ~w|art 32 32.1-2|] |> gdpr() |> raw() %>.<br>
      <%= gettext("These headers can help minimize data disclosures.") %>
    </p>
  </aside>

</section>